// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// WatcherMock implements mm_tarantool.Watcher
type WatcherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcUnregister          func()
	funcUnregisterOrigin    string
	inspectFuncUnregister   func()
	afterUnregisterCounter  uint64
	beforeUnregisterCounter uint64
	UnregisterMock          mWatcherMockUnregister
}

// NewWatcherMock returns a mock for mm_tarantool.Watcher
func NewWatcherMock(t minimock.Tester) *WatcherMock {
	m := &WatcherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UnregisterMock = mWatcherMockUnregister{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mWatcherMockUnregister struct {
	optional           bool
	mock               *WatcherMock
	defaultExpectation *WatcherMockUnregisterExpectation
	expectations       []*WatcherMockUnregisterExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// WatcherMockUnregisterExpectation specifies expectation struct of the Watcher.Unregister
type WatcherMockUnregisterExpectation struct {
	mock *WatcherMock

	returnOrigin string
	Counter      uint64
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUnregister *mWatcherMockUnregister) Optional() *mWatcherMockUnregister {
	mmUnregister.optional = true
	return mmUnregister
}

// Expect sets up expected params for Watcher.Unregister
func (mmUnregister *mWatcherMockUnregister) Expect() *mWatcherMockUnregister {
	if mmUnregister.mock.funcUnregister != nil {
		mmUnregister.mock.t.Fatalf("WatcherMock.Unregister mock is already set by Set")
	}

	if mmUnregister.defaultExpectation == nil {
		mmUnregister.defaultExpectation = &WatcherMockUnregisterExpectation{}
	}

	return mmUnregister
}

// Inspect accepts an inspector function that has same arguments as the Watcher.Unregister
func (mmUnregister *mWatcherMockUnregister) Inspect(f func()) *mWatcherMockUnregister {
	if mmUnregister.mock.inspectFuncUnregister != nil {
		mmUnregister.mock.t.Fatalf("Inspect function is already set for WatcherMock.Unregister")
	}

	mmUnregister.mock.inspectFuncUnregister = f

	return mmUnregister
}

// Return sets up results that will be returned by Watcher.Unregister
func (mmUnregister *mWatcherMockUnregister) Return() *WatcherMock {
	if mmUnregister.mock.funcUnregister != nil {
		mmUnregister.mock.t.Fatalf("WatcherMock.Unregister mock is already set by Set")
	}

	if mmUnregister.defaultExpectation == nil {
		mmUnregister.defaultExpectation = &WatcherMockUnregisterExpectation{mock: mmUnregister.mock}
	}

	mmUnregister.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUnregister.mock
}

// Set uses given function f to mock the Watcher.Unregister method
func (mmUnregister *mWatcherMockUnregister) Set(f func()) *WatcherMock {
	if mmUnregister.defaultExpectation != nil {
		mmUnregister.mock.t.Fatalf("Default expectation is already set for the Watcher.Unregister method")
	}

	if len(mmUnregister.expectations) > 0 {
		mmUnregister.mock.t.Fatalf("Some expectations are already set for the Watcher.Unregister method")
	}

	mmUnregister.mock.funcUnregister = f
	mmUnregister.mock.funcUnregisterOrigin = minimock.CallerInfo(1)
	return mmUnregister.mock
}

// Times sets number of times Watcher.Unregister should be invoked
func (mmUnregister *mWatcherMockUnregister) Times(n uint64) *mWatcherMockUnregister {
	if n == 0 {
		mmUnregister.mock.t.Fatalf("Times of WatcherMock.Unregister mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUnregister.expectedInvocations, n)
	mmUnregister.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUnregister
}

func (mmUnregister *mWatcherMockUnregister) invocationsDone() bool {
	if len(mmUnregister.expectations) == 0 && mmUnregister.defaultExpectation == nil && mmUnregister.mock.funcUnregister == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUnregister.mock.afterUnregisterCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUnregister.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Unregister implements mm_tarantool.Watcher
func (mmUnregister *WatcherMock) Unregister() {
	mm_atomic.AddUint64(&mmUnregister.beforeUnregisterCounter, 1)
	defer mm_atomic.AddUint64(&mmUnregister.afterUnregisterCounter, 1)

	mmUnregister.t.Helper()

	if mmUnregister.inspectFuncUnregister != nil {
		mmUnregister.inspectFuncUnregister()
	}

	if mmUnregister.UnregisterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUnregister.UnregisterMock.defaultExpectation.Counter, 1)

		return

	}
	if mmUnregister.funcUnregister != nil {
		mmUnregister.funcUnregister()
		return
	}
	mmUnregister.t.Fatalf("Unexpected call to WatcherMock.Unregister.")

}

// UnregisterAfterCounter returns a count of finished WatcherMock.Unregister invocations
func (mmUnregister *WatcherMock) UnregisterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnregister.afterUnregisterCounter)
}

// UnregisterBeforeCounter returns a count of WatcherMock.Unregister invocations
func (mmUnregister *WatcherMock) UnregisterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnregister.beforeUnregisterCounter)
}

// MinimockUnregisterDone returns true if the count of the Unregister invocations corresponds
// the number of defined expectations
func (m *WatcherMock) MinimockUnregisterDone() bool {
	if m.UnregisterMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UnregisterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UnregisterMock.invocationsDone()
}

// MinimockUnregisterInspect logs each unmet expectation
func (m *WatcherMock) MinimockUnregisterInspect() {
	for _, e := range m.UnregisterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to WatcherMock.Unregister")
		}
	}

	afterUnregisterCounter := mm_atomic.LoadUint64(&m.afterUnregisterCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UnregisterMock.defaultExpectation != nil && afterUnregisterCounter < 1 {
		m.t.Errorf("Expected call to WatcherMock.Unregister at\n%s", m.UnregisterMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnregister != nil && afterUnregisterCounter < 1 {
		m.t.Errorf("Expected call to WatcherMock.Unregister at\n%s", m.funcUnregisterOrigin)
	}

	if !m.UnregisterMock.invocationsDone() && afterUnregisterCounter > 0 {
		m.t.Errorf("Expected %d calls to WatcherMock.Unregister at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UnregisterMock.expectedInvocations), m.UnregisterMock.expectedInvocationsOrigin, afterUnregisterCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *WatcherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockUnregisterInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *WatcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *WatcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUnregisterDone()
}
