// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/tarantool/go-storage/operation"
	"github.com/tarantool/go-storage/predicate"
	"github.com/tarantool/go-storage/tx"
	"github.com/tarantool/go-storage/watch"
)

// DriverMock implements mm_driver.Driver
type DriverMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcExecute          func(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation) (r1 tx.Response, err error)
	funcExecuteOrigin    string
	inspectFuncExecute   func(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation)
	afterExecuteCounter  uint64
	beforeExecuteCounter uint64
	ExecuteMock          mDriverMockExecute

	funcWatch          func(ctx context.Context, key []byte, opts ...watch.Option) (ch1 <-chan watch.Event)
	funcWatchOrigin    string
	inspectFuncWatch   func(ctx context.Context, key []byte, opts ...watch.Option)
	afterWatchCounter  uint64
	beforeWatchCounter uint64
	WatchMock          mDriverMockWatch
}

// NewDriverMock returns a mock for mm_driver.Driver
func NewDriverMock(t minimock.Tester) *DriverMock {
	m := &DriverMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ExecuteMock = mDriverMockExecute{mock: m}
	m.ExecuteMock.callArgs = []*DriverMockExecuteParams{}

	m.WatchMock = mDriverMockWatch{mock: m}
	m.WatchMock.callArgs = []*DriverMockWatchParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mDriverMockExecute struct {
	optional           bool
	mock               *DriverMock
	defaultExpectation *DriverMockExecuteExpectation
	expectations       []*DriverMockExecuteExpectation

	callArgs []*DriverMockExecuteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// DriverMockExecuteExpectation specifies expectation struct of the Driver.Execute
type DriverMockExecuteExpectation struct {
	mock               *DriverMock
	params             *DriverMockExecuteParams
	paramPtrs          *DriverMockExecuteParamPtrs
	expectationOrigins DriverMockExecuteExpectationOrigins
	results            *DriverMockExecuteResults
	returnOrigin       string
	Counter            uint64
}

// DriverMockExecuteParams contains parameters of the Driver.Execute
type DriverMockExecuteParams struct {
	ctx        context.Context
	predicates []predicate.Predicate
	thenOps    []operation.Operation
	elseOps    []operation.Operation
}

// DriverMockExecuteParamPtrs contains pointers to parameters of the Driver.Execute
type DriverMockExecuteParamPtrs struct {
	ctx        *context.Context
	predicates *[]predicate.Predicate
	thenOps    *[]operation.Operation
	elseOps    *[]operation.Operation
}

// DriverMockExecuteResults contains results of the Driver.Execute
type DriverMockExecuteResults struct {
	r1  tx.Response
	err error
}

// DriverMockExecuteOrigins contains origins of expectations of the Driver.Execute
type DriverMockExecuteExpectationOrigins struct {
	origin           string
	originCtx        string
	originPredicates string
	originThenOps    string
	originElseOps    string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmExecute *mDriverMockExecute) Optional() *mDriverMockExecute {
	mmExecute.optional = true
	return mmExecute
}

// Expect sets up expected params for Driver.Execute
func (mmExecute *mDriverMockExecute) Expect(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation) *mDriverMockExecute {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &DriverMockExecuteExpectation{}
	}

	if mmExecute.defaultExpectation.paramPtrs != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by ExpectParams functions")
	}

	mmExecute.defaultExpectation.params = &DriverMockExecuteParams{ctx, predicates, thenOps, elseOps}
	mmExecute.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmExecute.expectations {
		if minimock.Equal(e.params, mmExecute.defaultExpectation.params) {
			mmExecute.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExecute.defaultExpectation.params)
		}
	}

	return mmExecute
}

// ExpectCtxParam1 sets up expected param ctx for Driver.Execute
func (mmExecute *mDriverMockExecute) ExpectCtxParam1(ctx context.Context) *mDriverMockExecute {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &DriverMockExecuteExpectation{}
	}

	if mmExecute.defaultExpectation.params != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Expect")
	}

	if mmExecute.defaultExpectation.paramPtrs == nil {
		mmExecute.defaultExpectation.paramPtrs = &DriverMockExecuteParamPtrs{}
	}
	mmExecute.defaultExpectation.paramPtrs.ctx = &ctx
	mmExecute.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmExecute
}

// ExpectPredicatesParam2 sets up expected param predicates for Driver.Execute
func (mmExecute *mDriverMockExecute) ExpectPredicatesParam2(predicates []predicate.Predicate) *mDriverMockExecute {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &DriverMockExecuteExpectation{}
	}

	if mmExecute.defaultExpectation.params != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Expect")
	}

	if mmExecute.defaultExpectation.paramPtrs == nil {
		mmExecute.defaultExpectation.paramPtrs = &DriverMockExecuteParamPtrs{}
	}
	mmExecute.defaultExpectation.paramPtrs.predicates = &predicates
	mmExecute.defaultExpectation.expectationOrigins.originPredicates = minimock.CallerInfo(1)

	return mmExecute
}

// ExpectThenOpsParam3 sets up expected param thenOps for Driver.Execute
func (mmExecute *mDriverMockExecute) ExpectThenOpsParam3(thenOps []operation.Operation) *mDriverMockExecute {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &DriverMockExecuteExpectation{}
	}

	if mmExecute.defaultExpectation.params != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Expect")
	}

	if mmExecute.defaultExpectation.paramPtrs == nil {
		mmExecute.defaultExpectation.paramPtrs = &DriverMockExecuteParamPtrs{}
	}
	mmExecute.defaultExpectation.paramPtrs.thenOps = &thenOps
	mmExecute.defaultExpectation.expectationOrigins.originThenOps = minimock.CallerInfo(1)

	return mmExecute
}

// ExpectElseOpsParam4 sets up expected param elseOps for Driver.Execute
func (mmExecute *mDriverMockExecute) ExpectElseOpsParam4(elseOps []operation.Operation) *mDriverMockExecute {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &DriverMockExecuteExpectation{}
	}

	if mmExecute.defaultExpectation.params != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Expect")
	}

	if mmExecute.defaultExpectation.paramPtrs == nil {
		mmExecute.defaultExpectation.paramPtrs = &DriverMockExecuteParamPtrs{}
	}
	mmExecute.defaultExpectation.paramPtrs.elseOps = &elseOps
	mmExecute.defaultExpectation.expectationOrigins.originElseOps = minimock.CallerInfo(1)

	return mmExecute
}

// Inspect accepts an inspector function that has same arguments as the Driver.Execute
func (mmExecute *mDriverMockExecute) Inspect(f func(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation)) *mDriverMockExecute {
	if mmExecute.mock.inspectFuncExecute != nil {
		mmExecute.mock.t.Fatalf("Inspect function is already set for DriverMock.Execute")
	}

	mmExecute.mock.inspectFuncExecute = f

	return mmExecute
}

// Return sets up results that will be returned by Driver.Execute
func (mmExecute *mDriverMockExecute) Return(r1 tx.Response, err error) *DriverMock {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	if mmExecute.defaultExpectation == nil {
		mmExecute.defaultExpectation = &DriverMockExecuteExpectation{mock: mmExecute.mock}
	}
	mmExecute.defaultExpectation.results = &DriverMockExecuteResults{r1, err}
	mmExecute.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmExecute.mock
}

// Set uses given function f to mock the Driver.Execute method
func (mmExecute *mDriverMockExecute) Set(f func(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation) (r1 tx.Response, err error)) *DriverMock {
	if mmExecute.defaultExpectation != nil {
		mmExecute.mock.t.Fatalf("Default expectation is already set for the Driver.Execute method")
	}

	if len(mmExecute.expectations) > 0 {
		mmExecute.mock.t.Fatalf("Some expectations are already set for the Driver.Execute method")
	}

	mmExecute.mock.funcExecute = f
	mmExecute.mock.funcExecuteOrigin = minimock.CallerInfo(1)
	return mmExecute.mock
}

// When sets expectation for the Driver.Execute which will trigger the result defined by the following
// Then helper
func (mmExecute *mDriverMockExecute) When(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation) *DriverMockExecuteExpectation {
	if mmExecute.mock.funcExecute != nil {
		mmExecute.mock.t.Fatalf("DriverMock.Execute mock is already set by Set")
	}

	expectation := &DriverMockExecuteExpectation{
		mock:               mmExecute.mock,
		params:             &DriverMockExecuteParams{ctx, predicates, thenOps, elseOps},
		expectationOrigins: DriverMockExecuteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmExecute.expectations = append(mmExecute.expectations, expectation)
	return expectation
}

// Then sets up Driver.Execute return parameters for the expectation previously defined by the When method
func (e *DriverMockExecuteExpectation) Then(r1 tx.Response, err error) *DriverMock {
	e.results = &DriverMockExecuteResults{r1, err}
	return e.mock
}

// Times sets number of times Driver.Execute should be invoked
func (mmExecute *mDriverMockExecute) Times(n uint64) *mDriverMockExecute {
	if n == 0 {
		mmExecute.mock.t.Fatalf("Times of DriverMock.Execute mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmExecute.expectedInvocations, n)
	mmExecute.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmExecute
}

func (mmExecute *mDriverMockExecute) invocationsDone() bool {
	if len(mmExecute.expectations) == 0 && mmExecute.defaultExpectation == nil && mmExecute.mock.funcExecute == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmExecute.mock.afterExecuteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmExecute.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Execute implements mm_driver.Driver
func (mmExecute *DriverMock) Execute(ctx context.Context, predicates []predicate.Predicate, thenOps []operation.Operation, elseOps []operation.Operation) (r1 tx.Response, err error) {
	mm_atomic.AddUint64(&mmExecute.beforeExecuteCounter, 1)
	defer mm_atomic.AddUint64(&mmExecute.afterExecuteCounter, 1)

	mmExecute.t.Helper()

	if mmExecute.inspectFuncExecute != nil {
		mmExecute.inspectFuncExecute(ctx, predicates, thenOps, elseOps)
	}

	mm_params := DriverMockExecuteParams{ctx, predicates, thenOps, elseOps}

	// Record call args
	mmExecute.ExecuteMock.mutex.Lock()
	mmExecute.ExecuteMock.callArgs = append(mmExecute.ExecuteMock.callArgs, &mm_params)
	mmExecute.ExecuteMock.mutex.Unlock()

	for _, e := range mmExecute.ExecuteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmExecute.ExecuteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExecute.ExecuteMock.defaultExpectation.Counter, 1)
		mm_want := mmExecute.ExecuteMock.defaultExpectation.params
		mm_want_ptrs := mmExecute.ExecuteMock.defaultExpectation.paramPtrs

		mm_got := DriverMockExecuteParams{ctx, predicates, thenOps, elseOps}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmExecute.t.Errorf("DriverMock.Execute got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExecute.ExecuteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.predicates != nil && !minimock.Equal(*mm_want_ptrs.predicates, mm_got.predicates) {
				mmExecute.t.Errorf("DriverMock.Execute got unexpected parameter predicates, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExecute.ExecuteMock.defaultExpectation.expectationOrigins.originPredicates, *mm_want_ptrs.predicates, mm_got.predicates, minimock.Diff(*mm_want_ptrs.predicates, mm_got.predicates))
			}

			if mm_want_ptrs.thenOps != nil && !minimock.Equal(*mm_want_ptrs.thenOps, mm_got.thenOps) {
				mmExecute.t.Errorf("DriverMock.Execute got unexpected parameter thenOps, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExecute.ExecuteMock.defaultExpectation.expectationOrigins.originThenOps, *mm_want_ptrs.thenOps, mm_got.thenOps, minimock.Diff(*mm_want_ptrs.thenOps, mm_got.thenOps))
			}

			if mm_want_ptrs.elseOps != nil && !minimock.Equal(*mm_want_ptrs.elseOps, mm_got.elseOps) {
				mmExecute.t.Errorf("DriverMock.Execute got unexpected parameter elseOps, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExecute.ExecuteMock.defaultExpectation.expectationOrigins.originElseOps, *mm_want_ptrs.elseOps, mm_got.elseOps, minimock.Diff(*mm_want_ptrs.elseOps, mm_got.elseOps))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExecute.t.Errorf("DriverMock.Execute got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmExecute.ExecuteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExecute.ExecuteMock.defaultExpectation.results
		if mm_results == nil {
			mmExecute.t.Fatal("No results are set for the DriverMock.Execute")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmExecute.funcExecute != nil {
		return mmExecute.funcExecute(ctx, predicates, thenOps, elseOps)
	}
	mmExecute.t.Fatalf("Unexpected call to DriverMock.Execute. %v %v %v %v", ctx, predicates, thenOps, elseOps)
	return
}

// ExecuteAfterCounter returns a count of finished DriverMock.Execute invocations
func (mmExecute *DriverMock) ExecuteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExecute.afterExecuteCounter)
}

// ExecuteBeforeCounter returns a count of DriverMock.Execute invocations
func (mmExecute *DriverMock) ExecuteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExecute.beforeExecuteCounter)
}

// Calls returns a list of arguments used in each call to DriverMock.Execute.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExecute *mDriverMockExecute) Calls() []*DriverMockExecuteParams {
	mmExecute.mutex.RLock()

	argCopy := make([]*DriverMockExecuteParams, len(mmExecute.callArgs))
	copy(argCopy, mmExecute.callArgs)

	mmExecute.mutex.RUnlock()

	return argCopy
}

// MinimockExecuteDone returns true if the count of the Execute invocations corresponds
// the number of defined expectations
func (m *DriverMock) MinimockExecuteDone() bool {
	if m.ExecuteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ExecuteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ExecuteMock.invocationsDone()
}

// MinimockExecuteInspect logs each unmet expectation
func (m *DriverMock) MinimockExecuteInspect() {
	for _, e := range m.ExecuteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DriverMock.Execute at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterExecuteCounter := mm_atomic.LoadUint64(&m.afterExecuteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ExecuteMock.defaultExpectation != nil && afterExecuteCounter < 1 {
		if m.ExecuteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to DriverMock.Execute at\n%s", m.ExecuteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to DriverMock.Execute at\n%s with params: %#v", m.ExecuteMock.defaultExpectation.expectationOrigins.origin, *m.ExecuteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExecute != nil && afterExecuteCounter < 1 {
		m.t.Errorf("Expected call to DriverMock.Execute at\n%s", m.funcExecuteOrigin)
	}

	if !m.ExecuteMock.invocationsDone() && afterExecuteCounter > 0 {
		m.t.Errorf("Expected %d calls to DriverMock.Execute at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ExecuteMock.expectedInvocations), m.ExecuteMock.expectedInvocationsOrigin, afterExecuteCounter)
	}
}

type mDriverMockWatch struct {
	optional           bool
	mock               *DriverMock
	defaultExpectation *DriverMockWatchExpectation
	expectations       []*DriverMockWatchExpectation

	callArgs []*DriverMockWatchParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// DriverMockWatchExpectation specifies expectation struct of the Driver.Watch
type DriverMockWatchExpectation struct {
	mock               *DriverMock
	params             *DriverMockWatchParams
	paramPtrs          *DriverMockWatchParamPtrs
	expectationOrigins DriverMockWatchExpectationOrigins
	results            *DriverMockWatchResults
	returnOrigin       string
	Counter            uint64
}

// DriverMockWatchParams contains parameters of the Driver.Watch
type DriverMockWatchParams struct {
	ctx  context.Context
	key  []byte
	opts []watch.Option
}

// DriverMockWatchParamPtrs contains pointers to parameters of the Driver.Watch
type DriverMockWatchParamPtrs struct {
	ctx  *context.Context
	key  *[]byte
	opts *[]watch.Option
}

// DriverMockWatchResults contains results of the Driver.Watch
type DriverMockWatchResults struct {
	ch1 <-chan watch.Event
}

// DriverMockWatchOrigins contains origins of expectations of the Driver.Watch
type DriverMockWatchExpectationOrigins struct {
	origin     string
	originCtx  string
	originKey  string
	originOpts string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWatch *mDriverMockWatch) Optional() *mDriverMockWatch {
	mmWatch.optional = true
	return mmWatch
}

// Expect sets up expected params for Driver.Watch
func (mmWatch *mDriverMockWatch) Expect(ctx context.Context, key []byte, opts ...watch.Option) *mDriverMockWatch {
	if mmWatch.mock.funcWatch != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Set")
	}

	if mmWatch.defaultExpectation == nil {
		mmWatch.defaultExpectation = &DriverMockWatchExpectation{}
	}

	if mmWatch.defaultExpectation.paramPtrs != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by ExpectParams functions")
	}

	mmWatch.defaultExpectation.params = &DriverMockWatchParams{ctx, key, opts}
	mmWatch.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWatch.expectations {
		if minimock.Equal(e.params, mmWatch.defaultExpectation.params) {
			mmWatch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWatch.defaultExpectation.params)
		}
	}

	return mmWatch
}

// ExpectCtxParam1 sets up expected param ctx for Driver.Watch
func (mmWatch *mDriverMockWatch) ExpectCtxParam1(ctx context.Context) *mDriverMockWatch {
	if mmWatch.mock.funcWatch != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Set")
	}

	if mmWatch.defaultExpectation == nil {
		mmWatch.defaultExpectation = &DriverMockWatchExpectation{}
	}

	if mmWatch.defaultExpectation.params != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Expect")
	}

	if mmWatch.defaultExpectation.paramPtrs == nil {
		mmWatch.defaultExpectation.paramPtrs = &DriverMockWatchParamPtrs{}
	}
	mmWatch.defaultExpectation.paramPtrs.ctx = &ctx
	mmWatch.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWatch
}

// ExpectKeyParam2 sets up expected param key for Driver.Watch
func (mmWatch *mDriverMockWatch) ExpectKeyParam2(key []byte) *mDriverMockWatch {
	if mmWatch.mock.funcWatch != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Set")
	}

	if mmWatch.defaultExpectation == nil {
		mmWatch.defaultExpectation = &DriverMockWatchExpectation{}
	}

	if mmWatch.defaultExpectation.params != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Expect")
	}

	if mmWatch.defaultExpectation.paramPtrs == nil {
		mmWatch.defaultExpectation.paramPtrs = &DriverMockWatchParamPtrs{}
	}
	mmWatch.defaultExpectation.paramPtrs.key = &key
	mmWatch.defaultExpectation.expectationOrigins.originKey = minimock.CallerInfo(1)

	return mmWatch
}

// ExpectOptsParam3 sets up expected param opts for Driver.Watch
func (mmWatch *mDriverMockWatch) ExpectOptsParam3(opts ...watch.Option) *mDriverMockWatch {
	if mmWatch.mock.funcWatch != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Set")
	}

	if mmWatch.defaultExpectation == nil {
		mmWatch.defaultExpectation = &DriverMockWatchExpectation{}
	}

	if mmWatch.defaultExpectation.params != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Expect")
	}

	if mmWatch.defaultExpectation.paramPtrs == nil {
		mmWatch.defaultExpectation.paramPtrs = &DriverMockWatchParamPtrs{}
	}
	mmWatch.defaultExpectation.paramPtrs.opts = &opts
	mmWatch.defaultExpectation.expectationOrigins.originOpts = minimock.CallerInfo(1)

	return mmWatch
}

// Inspect accepts an inspector function that has same arguments as the Driver.Watch
func (mmWatch *mDriverMockWatch) Inspect(f func(ctx context.Context, key []byte, opts ...watch.Option)) *mDriverMockWatch {
	if mmWatch.mock.inspectFuncWatch != nil {
		mmWatch.mock.t.Fatalf("Inspect function is already set for DriverMock.Watch")
	}

	mmWatch.mock.inspectFuncWatch = f

	return mmWatch
}

// Return sets up results that will be returned by Driver.Watch
func (mmWatch *mDriverMockWatch) Return(ch1 <-chan watch.Event) *DriverMock {
	if mmWatch.mock.funcWatch != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Set")
	}

	if mmWatch.defaultExpectation == nil {
		mmWatch.defaultExpectation = &DriverMockWatchExpectation{mock: mmWatch.mock}
	}
	mmWatch.defaultExpectation.results = &DriverMockWatchResults{ch1}
	mmWatch.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWatch.mock
}

// Set uses given function f to mock the Driver.Watch method
func (mmWatch *mDriverMockWatch) Set(f func(ctx context.Context, key []byte, opts ...watch.Option) (ch1 <-chan watch.Event)) *DriverMock {
	if mmWatch.defaultExpectation != nil {
		mmWatch.mock.t.Fatalf("Default expectation is already set for the Driver.Watch method")
	}

	if len(mmWatch.expectations) > 0 {
		mmWatch.mock.t.Fatalf("Some expectations are already set for the Driver.Watch method")
	}

	mmWatch.mock.funcWatch = f
	mmWatch.mock.funcWatchOrigin = minimock.CallerInfo(1)
	return mmWatch.mock
}

// When sets expectation for the Driver.Watch which will trigger the result defined by the following
// Then helper
func (mmWatch *mDriverMockWatch) When(ctx context.Context, key []byte, opts ...watch.Option) *DriverMockWatchExpectation {
	if mmWatch.mock.funcWatch != nil {
		mmWatch.mock.t.Fatalf("DriverMock.Watch mock is already set by Set")
	}

	expectation := &DriverMockWatchExpectation{
		mock:               mmWatch.mock,
		params:             &DriverMockWatchParams{ctx, key, opts},
		expectationOrigins: DriverMockWatchExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWatch.expectations = append(mmWatch.expectations, expectation)
	return expectation
}

// Then sets up Driver.Watch return parameters for the expectation previously defined by the When method
func (e *DriverMockWatchExpectation) Then(ch1 <-chan watch.Event) *DriverMock {
	e.results = &DriverMockWatchResults{ch1}
	return e.mock
}

// Times sets number of times Driver.Watch should be invoked
func (mmWatch *mDriverMockWatch) Times(n uint64) *mDriverMockWatch {
	if n == 0 {
		mmWatch.mock.t.Fatalf("Times of DriverMock.Watch mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWatch.expectedInvocations, n)
	mmWatch.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWatch
}

func (mmWatch *mDriverMockWatch) invocationsDone() bool {
	if len(mmWatch.expectations) == 0 && mmWatch.defaultExpectation == nil && mmWatch.mock.funcWatch == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWatch.mock.afterWatchCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWatch.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Watch implements mm_driver.Driver
func (mmWatch *DriverMock) Watch(ctx context.Context, key []byte, opts ...watch.Option) (ch1 <-chan watch.Event) {
	mm_atomic.AddUint64(&mmWatch.beforeWatchCounter, 1)
	defer mm_atomic.AddUint64(&mmWatch.afterWatchCounter, 1)

	mmWatch.t.Helper()

	if mmWatch.inspectFuncWatch != nil {
		mmWatch.inspectFuncWatch(ctx, key, opts...)
	}

	mm_params := DriverMockWatchParams{ctx, key, opts}

	// Record call args
	mmWatch.WatchMock.mutex.Lock()
	mmWatch.WatchMock.callArgs = append(mmWatch.WatchMock.callArgs, &mm_params)
	mmWatch.WatchMock.mutex.Unlock()

	for _, e := range mmWatch.WatchMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ch1
		}
	}

	if mmWatch.WatchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWatch.WatchMock.defaultExpectation.Counter, 1)
		mm_want := mmWatch.WatchMock.defaultExpectation.params
		mm_want_ptrs := mmWatch.WatchMock.defaultExpectation.paramPtrs

		mm_got := DriverMockWatchParams{ctx, key, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWatch.t.Errorf("DriverMock.Watch got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWatch.WatchMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.key != nil && !minimock.Equal(*mm_want_ptrs.key, mm_got.key) {
				mmWatch.t.Errorf("DriverMock.Watch got unexpected parameter key, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWatch.WatchMock.defaultExpectation.expectationOrigins.originKey, *mm_want_ptrs.key, mm_got.key, minimock.Diff(*mm_want_ptrs.key, mm_got.key))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmWatch.t.Errorf("DriverMock.Watch got unexpected parameter opts, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWatch.WatchMock.defaultExpectation.expectationOrigins.originOpts, *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWatch.t.Errorf("DriverMock.Watch got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWatch.WatchMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWatch.WatchMock.defaultExpectation.results
		if mm_results == nil {
			mmWatch.t.Fatal("No results are set for the DriverMock.Watch")
		}
		return (*mm_results).ch1
	}
	if mmWatch.funcWatch != nil {
		return mmWatch.funcWatch(ctx, key, opts...)
	}
	mmWatch.t.Fatalf("Unexpected call to DriverMock.Watch. %v %v %v", ctx, key, opts)
	return
}

// WatchAfterCounter returns a count of finished DriverMock.Watch invocations
func (mmWatch *DriverMock) WatchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWatch.afterWatchCounter)
}

// WatchBeforeCounter returns a count of DriverMock.Watch invocations
func (mmWatch *DriverMock) WatchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWatch.beforeWatchCounter)
}

// Calls returns a list of arguments used in each call to DriverMock.Watch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWatch *mDriverMockWatch) Calls() []*DriverMockWatchParams {
	mmWatch.mutex.RLock()

	argCopy := make([]*DriverMockWatchParams, len(mmWatch.callArgs))
	copy(argCopy, mmWatch.callArgs)

	mmWatch.mutex.RUnlock()

	return argCopy
}

// MinimockWatchDone returns true if the count of the Watch invocations corresponds
// the number of defined expectations
func (m *DriverMock) MinimockWatchDone() bool {
	if m.WatchMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WatchMock.invocationsDone()
}

// MinimockWatchInspect logs each unmet expectation
func (m *DriverMock) MinimockWatchInspect() {
	for _, e := range m.WatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DriverMock.Watch at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWatchCounter := mm_atomic.LoadUint64(&m.afterWatchCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WatchMock.defaultExpectation != nil && afterWatchCounter < 1 {
		if m.WatchMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to DriverMock.Watch at\n%s", m.WatchMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to DriverMock.Watch at\n%s with params: %#v", m.WatchMock.defaultExpectation.expectationOrigins.origin, *m.WatchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWatch != nil && afterWatchCounter < 1 {
		m.t.Errorf("Expected call to DriverMock.Watch at\n%s", m.funcWatchOrigin)
	}

	if !m.WatchMock.invocationsDone() && afterWatchCounter > 0 {
		m.t.Errorf("Expected %d calls to DriverMock.Watch at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WatchMock.expectedInvocations), m.WatchMock.expectedInvocationsOrigin, afterWatchCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DriverMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockExecuteInspect()

			m.MinimockWatchInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DriverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DriverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockExecuteDone() &&
		m.MinimockWatchDone()
}
